transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
}
gtexBenchmarkDataLenient_function <- generate_lenient_benchmark_dataset(countData=gtexCm, metaData=txInfo, nrRepList=nrRepList, fracGenesAffected=0.15)
rm(gtexBenchmarkDataLenient_function)
gtexBenchmarkDataLenient_function <- generate_lenient_benchmark_dataset(countData=gtexCm, metaData=txInfo, nrRepList=nrRepList, fracGenesAffected=0.15)
generate_lenient_benchmark_dataset <- function(countData, metaData, nrRepList, fracGenesAffected){
lapply(c(1:length(nrRepList)), function(x) {
# Step 1: Extract random sub-sample of correct size
set.seed(x)
localSampleSize <- nrRepList[[x]]
if(TRUE) {
localSubset <- sample(
colnames(countData),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
# Step 2: Subset to expressed features using edgeR::filterByExpr
if(TRUE) {
y <- edgeR::DGEList(counts = countData[,localDesign$sample_id])
design <- model.matrix(~condition, data=localDesign)
filter <- edgeR::filterByExpr(y,design=design)
localCm <- y$counts[filter,]
# Get only multi-isoform genes (after filtering)
localTx <- metaData[which(
metaData$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
}
# Step 3: Extract isoforms to modify
if(TRUE) {
genesToModify <- sample(
x = unique(localTx$gene_id),
size = round(
length(unique(localTx$gene_id)) * fracGenesAffected
)
)
samplesToModify <- localDesign$sample_id[which(
localDesign$condition == 'b')]
cm_swapped <- localCm
transcripts_toSwap_current <- c()
transcripts_swapped_current <- c()
transcripts_swapped_all <- c()
transcripts_toSwap_all <- c()
for (gene in genesToModify) {
current <- localTx[which(localTx$gene_id==gene),]
nSwap <- max(2,rbinom(1,nrow(current),1/3))
transcripts_toSwap_current <- sample(
x = current$isoform_id,
size = nSwap)
# swap order of txs completely by putting the fist one last
transcripts_swapped_current <- c(transcripts_toSwap_current[-1],transcripts_toSwap_current[1])
# Add to swapping queue
transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
}
gtexBenchmarkDataLenient_function <- generate_lenient_benchmark_dataset(countData=gtexCm, metaData=txInfo, nrRepList=nrRepList, fracGenesAffected=0.15)
gtexBenchmarkDataLenient_function[[1]]$data[1:5,1:5]
all(gtexBenchmarkDataLenient_function[[1]]$data == gtexBenchmarkDataLenient[[1]]$data)
all(gtexBenchmarkDataLenient_function[[2]]$data == gtexBenchmarkDataLenient[[1]]$data)
all(gtexBenchmarkDataLenient_function[[2]]$data == gtexBenchmarkDataLenient[[2]]$data)
generate_lenient_benchmark_dataset <- function(countData, metaData, filter, nrRepList, fracGenesAffected){
lapply(c(1:length(nrRepList)), function(x) {
# Step 1: Extract random sub-sample of correct size
set.seed(x)
localSampleSize <- nrRepList[[x]]
if(TRUE) {
localSubset <- sample(
colnames(countData),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
# Step 2: Subset to expressed features using edgeR::filterByExpr
if(filter=="edgeR") {
y <- edgeR::DGEList(counts = gtexCm[,localDesign$sample_id])
design <- model.matrix(~condition, data=localDesign)
filter <- edgeR::filterByExpr(y,design=design)
localCm <- y$counts[filter,]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
} else {
localCm <- gtexCm[,localDesign$sample_id]
geneForEachTx <- txInfo[match(rownames(localCm),txInfo[,"isoform_id"]),"gene_id"]
localCm$gene_id <- geneForEachTx
localCm$feature_id <- row.names(localCm)
d <- DRIMSeq::dmDSdata(counts = localCm, samples = localDesign)
d_filter <- dmFilter(d,
min_samps_feature_expr=localSampleSize/2,
min_feature_expr=10,
min_samps_feature_prop=localSampleSize/2,
min_feature_prop=0.1,
min_samps_gene_expr=localSampleSize,
min_gene_expr=10)
localCm <- gtexCm[counts(d_filter)$feature_id,localDesign$sample_id]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
}
# Step 3: Extract isoforms to modify
if(TRUE) {
genesToModify <- sample(
x = unique(localTx$gene_id),
size = round(
length(unique(localTx$gene_id)) * fracGenesAffected
)
)
samplesToModify <- localDesign$sample_id[which(
localDesign$condition == 'b')]
cm_swapped <- localCm
transcripts_toSwap_current <- c()
transcripts_swapped_current <- c()
transcripts_swapped_all <- c()
transcripts_toSwap_all <- c()
for (gene in genesToModify) {
current <- localTx[which(localTx$gene_id==gene),]
nSwap <- max(2,rbinom(1,nrow(current),1/3))
transcripts_toSwap_current <- sample(
x = current$isoform_id,
size = nSwap)
# swap order of txs completely by putting the fist one last
transcripts_swapped_current <- c(transcripts_toSwap_current[-1],transcripts_toSwap_current[1])
# Add to swapping queue
transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
}
gtexBenchmarkDataLenient_function <- generate_lenient_benchmark_dataset(countData=gtexCm, metaData=txInfo,filter="edgeR", nrRepList=nrRepList, fracGenesAffected=0.15)
if(TRUE) {
localSubset <- sample(
colnames(countData),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
generate_lenient_benchmark_dataset <- function(countData, metaData, filter, nrRepList, fracGenesAffected){
lapply(c(1:length(nrRepList)), function(x) {
# Step 1: Extract random sub-sample of correct size
set.seed(x)
localSampleSize <- nrRepList[[x]]
if(TRUE) {
localSubset <- sample(
colnames(countData),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
# Step 2: Subset to expressed features using edgeR::filterByExpr
if(filter=="edgeR") {
y <- edgeR::DGEList(counts = gtexCm[,localDesign$sample_id])
design <- model.matrix(~condition, data=localDesign)
filter <- edgeR::filterByExpr(y,design=design)
localCm <- y$counts[filter,]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
} else if(filter=="DRIMSeq") {
localCm <- gtexCm[,localDesign$sample_id]
geneForEachTx <- txInfo[match(rownames(localCm),txInfo[,"isoform_id"]),"gene_id"]
localCm$gene_id <- geneForEachTx
localCm$feature_id <- row.names(localCm)
d <- DRIMSeq::dmDSdata(counts = localCm, samples = localDesign)
d_filter <- dmFilter(d,
min_samps_feature_expr=localSampleSize/2,
min_feature_expr=10,
min_samps_feature_prop=localSampleSize/2,
min_feature_prop=0.1,
min_samps_gene_expr=localSampleSize,
min_gene_expr=10)
localCm <- gtexCm[counts(d_filter)$feature_id,localDesign$sample_id]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
}
# Step 3: Extract isoforms to modify
if(TRUE) {
genesToModify <- sample(
x = unique(localTx$gene_id),
size = round(
length(unique(localTx$gene_id)) * fracGenesAffected
)
)
samplesToModify <- localDesign$sample_id[which(
localDesign$condition == 'b')]
cm_swapped <- localCm
transcripts_toSwap_current <- c()
transcripts_swapped_current <- c()
transcripts_swapped_all <- c()
transcripts_toSwap_all <- c()
for (gene in genesToModify) {
current <- localTx[which(localTx$gene_id==gene),]
nSwap <- max(2,rbinom(1,nrow(current),1/3))
transcripts_toSwap_current <- sample(
x = current$isoform_id,
size = nSwap)
# swap order of txs completely by putting the fist one last
transcripts_swapped_current <- c(transcripts_toSwap_current[-1],transcripts_toSwap_current[1])
# Add to swapping queue
transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
}
gtexBenchmarkDataStringent_function <- generate_lenient_benchmark_dataset(countData=gtexCm, metaData=txInfo,filter="DRIMSeq", nrRepList=nrRepList, fracGenesAffected=0.15)
gtexBenchmarkDataStringent <- lapply(c(1:length(nrRepList)), function(x) {
# Step 1: Extract random sub-sample of correct size
set.seed(x)
localSampleSize <- nrRepList[[x]]
if(TRUE) {
localSubset <- sample(
colnames(gtexCm),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
# Step 2: Subset to expressed features using DRIMSeq::dmFilter
if(TRUE) {
localCm <- gtexCm[,localDesign$sample_id]
geneForEachTx <- txInfo[match(rownames(localCm),txInfo[,"isoform_id"]),"gene_id"]
localCm$gene_id <- geneForEachTx
localCm$feature_id <- row.names(localCm)
d <- DRIMSeq::dmDSdata(counts = localCm, samples = localDesign)
d_filter <- dmFilter(d,
min_samps_feature_expr=localSampleSize/2,
min_feature_expr=10,
min_samps_feature_prop=localSampleSize/2,
min_feature_prop=0.1,
min_samps_gene_expr=localSampleSize,
min_gene_expr=10)
localCm <- gtexCm[counts(d_filter)$feature_id,localDesign$sample_id]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
}
# Step 3: Extract isoforms to modify
if(TRUE) {
genesToModify <- sample(
x = unique(localTx$gene_id),
size = round(length(unique(localTx$gene_id)) * fracGenesAffected))
samplesToModify <- localDesign$sample_id[which(
localDesign$condition == 'b')]
cm_swapped <- localCm
transcripts_toSwap_current <- c()
transcripts_swapped_current <- c()
transcripts_swapped_all <- c()
transcripts_toSwap_all <- c()
for (gene in genesToModify) {
current <- localTx[which(localTx$gene_id==gene),]
nSwap <- max(2,rbinom(1,nrow(current),1/3))
transcripts_toSwap_current <- sample(
x = current$isoform_id,
size = nSwap)
# swap order of txs completely by putting the fist one last
transcripts_swapped_current <- c(transcripts_toSwap_current[-1],transcripts_toSwap_current[1])
# Add to swapping queue
transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
# Set benchmark parameters
samplesPrCondition   <- c(5,20,50)
nrRepsMade           <- 3
fracGenesAffected    <- 0.15
nrCoresToUse         <- 2
gtexBenchmarkDataStringent <- lapply(c(1:length(nrRepList)), function(x) {
# Step 1: Extract random sub-sample of correct size
set.seed(x)
localSampleSize <- nrRepList[[x]]
if(TRUE) {
localSubset <- sample(
colnames(gtexCm),
localSampleSize * 2
)
localDesign <- data.frame(
sample_id = localSubset,
condition = c(
rep('a',floor  ( length(localSampleSize) )),
rep('b',ceiling( length(localSampleSize) ))
),
stringsAsFactors = FALSE
)
localDesign <- localDesign[sort.list(localDesign$condition),]
}
# Step 2: Subset to expressed features using DRIMSeq::dmFilter
if(TRUE) {
localCm <- gtexCm[,localDesign$sample_id]
geneForEachTx <- txInfo[match(rownames(localCm),txInfo[,"isoform_id"]),"gene_id"]
localCm$gene_id <- geneForEachTx
localCm$feature_id <- row.names(localCm)
d <- DRIMSeq::dmDSdata(counts = localCm, samples = localDesign)
d_filter <- dmFilter(d,
min_samps_feature_expr=localSampleSize/2,
min_feature_expr=10,
min_samps_feature_prop=localSampleSize/2,
min_feature_prop=0.1,
min_samps_gene_expr=localSampleSize,
min_gene_expr=10)
localCm <- gtexCm[counts(d_filter)$feature_id,localDesign$sample_id]
# Get only multi-isoform genes (after filtering)
localTx <- txInfo[which(
txInfo$isoform_id %in% rownames(localCm)),]
tmp <- table(localTx$gene_id)
tmp <- tmp[which( tmp >= 2)]
localTx <- localTx[which(localTx$gene_id %in% names(tmp)),]
localCm <- localCm[which(rownames(localCm) %in% localTx$isoform_id),]
}
# Step 3: Extract isoforms to modify
if(TRUE) {
genesToModify <- sample(
x = unique(localTx$gene_id),
size = round(length(unique(localTx$gene_id)) * fracGenesAffected))
samplesToModify <- localDesign$sample_id[which(
localDesign$condition == 'b')]
cm_swapped <- localCm
transcripts_toSwap_current <- c()
transcripts_swapped_current <- c()
transcripts_swapped_all <- c()
transcripts_toSwap_all <- c()
for (gene in genesToModify) {
current <- localTx[which(localTx$gene_id==gene),]
nSwap <- max(2,rbinom(1,nrow(current),1/3))
transcripts_toSwap_current <- sample(
x = current$isoform_id,
size = nSwap)
# swap order of txs completely by putting the fist one last
transcripts_swapped_current <- c(transcripts_toSwap_current[-1],transcripts_toSwap_current[1])
# Add to swapping queue
transcripts_swapped_all <- c(transcripts_swapped_all,transcripts_swapped_current)
transcripts_toSwap_all <- c(transcripts_toSwap_all,transcripts_toSwap_current)
}
# Perform the swapping in matrix
cm_swapped[transcripts_toSwap_all,which(colnames(cm_swapped)%in%samplesToModify)] <- cm_swapped[transcripts_swapped_all,which(colnames(cm_swapped)%in%samplesToModify)]
# Set swapping in localTx
localTx$txSwapped <- vector(length=nrow(localTx))
localTx[which(localTx$isoform_id %in% transcripts_swapped_all),"txSwapped"] <- TRUE
localTx$nrSamplesPerCondition <- localSampleSize
}
colnames(localTx) <- c('TXNAME','GENEID','txSwapped','nrSamplesPerCondition')
# Combine data
dataList <- list(
data     = cm_swapped,
design   = localDesign,
metaInfo = localTx
)
return(dataList)
})
names(gtexBenchmarkDataStringent) <- paste0(names(nrRepList),"_filterStringent")
all(gtexBenchmarkDataStringent[[1]]$data == gtexBenchmarkDataStringent[[1]]$data)
all(gtexBenchmarkDataStringent[[2]]$data == gtexBenchmarkDataStringent[[2]]$data)
dim(gtexBenchmarkDataStringent[[2]]$data)
dim(gtexBenchmarkDataStringent[[2]]$data)
for (i in 1:length(gtexBenchmarkDataStringent)) {
print(dim(gtexBenchmarkDataStringent[[1]]$data))
}
print(dim(gtexBenchmarkDataStringent[[i]]$data))
for (i in 1:length(gtexBenchmarkDataStringent)) {
print(dim(gtexBenchmarkDataStringent[[i]]$data))
}
all(gtexBenchmarkDataStringent_function[[2]]$data == gtexBenchmarkDataStringent[[2]]$data)
for (i in 1:length(gtexBenchmarkDataStringent)) {
print(dim(gtexBenchmarkDataStringent_function[[i]]$data))
}
gtexBenchmarkDataStringent_function[[i]]$design
for (i in 1:length(gtexBenchmarkDataStringent)) {
print(all(gtexBenchmarkDataStringent_function[[i]]$design$sample_id == gtexBenchmarkDataStringent[[i]]$design$sample_id))
}
rm(list=ls())
gc()
