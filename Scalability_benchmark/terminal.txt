#!/usr/bin/env Rscript

# Generate data (counts, file linking transcripts and gene and file containing eeffective transcript lengths)
#source("initialFiltering.R")

# 1. Scalability benchmark of our quasibinomial method

## 1.1. Source the quasibinomial method file
source("apply_quasiBinomial.R")

## 1.2. Source the first configuration file
source("configFile_1.R")

## 1.3. Perform the scalability analysis on the first configuration file

finalOutput_quasiBinomial_1 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_quasiBinomial(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_quasiBinomial_1[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_quasiBinomial_1, file = "/home/compomics/scTime_Chen/results/finalOutput_quasiBinomial_1.RData") # I save this list as RData

## 1.4. Source the second configuration file
source("configFile_2.R")

## 1.5. Perform the scalability analysis on the second configuration file

finalOutput_quasiBinomial_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_quasiBinomial(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_quasiBinomial_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_quasiBinomial_2, file = "/home/compomics/scTime_Chen/results/finalOutput_quasiBinomial_2.RData") # I save this list as RData

# 2. Scalability benchmark of limma diffsplice

## 2.1. Source the limma diffsplice method file
source("apply_limmaDiffsplice.R")

## 2.2. Source the first configuration file
source("configFile_1.R")

## 2.3. Perform the scalability analysis on the first configuration file

finalOutput_limmaDiffsplice_1 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_limmaDiffsplice(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_limmaDiffsplice_1[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_limmaDiffsplice_1, file = "/home/compomics/scTime_Chen/results/finalOutput_limmaDiffsplice_1.RData") # I save this list as RData

## 2.4. Source the second configuration file
source("configFile_2.R")

## 2.5. Perform the scalability analysis on the second configuration file

finalOutput_limmaDiffsplice_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_limmaDiffsplice(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_limmaDiffsplice_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_limmaDiffsplice_2, file = "/home/compomics/scTime_Chen/results/finalOutput_limmaDiffsplice_2.RData") # I save this list as RData

# 3. Scalability benchmark of edgeR diffsplice

## 3.1. Source the edgeR diffsplice method file
source("apply_edgeRDiffsplice.R")

## 3.2. Source the first configuration file
source("configFile_1.R")

## 3.3. Perform the scalability analysis on the first configuration file

finalOutput_edgeRDiffsplice_1 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_edgeRDiffsplice(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_edgeRDiffsplice_1[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_edgeRDiffsplice_1, file = "/home/compomics/scTime_Chen/results/finalOutput_edgeRDiffsplice_1.RData") # I save this list as RData

## 3.4. Source the second configuration file
source("configFile_2.R")

## 3.5. Perform the scalability analysis on the second configuration file

finalOutput_edgeRDiffsplice_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_edgeRDiffsplice(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_edgeRDiffsplice_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_edgeRDiffsplice_2, file = "/home/compomics/scTime_Chen/results/finalOutput_edgeRDiffsplice_2.RData") # I save this list as RData

# 4. Scalability benchmark of DoubleExpSeq

## 4.1. Source the DoubleExpSeq method file
source("apply_doubleExpSeq.R")

## 4.2. Source the first configuration file
source("configFile_1.R")

## 4.3. Perform the scalability analysis on the first configuration file

finalOutput_DoubleExpSeq_1 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_doubleExpSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DoubleExpSeq_1[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DoubleExpSeq_1, file = "/home/compomics/scTime_Chen/results/finalOutput_DoubleExpSeq_1.RData") # I save this list as RData

## 4.4. Source the second configuration file
source("configFile_2.R")

## 4.5. Perform the scalability analysis on the second configuration file

finalOutput_DoubleExpSeq_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_doubleExpSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DoubleExpSeq_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DoubleExpSeq_2, file = "/home/compomics/scTime_Chen/results/finalOutput_DoubleExpSeq_2.RData") # I save this list as RData

# 5. Scalability benchmark of DRIMSeq

## 5.1. Source the DRIMSeq method file
source("apply_DRIMSeq.R")

## 5.2. Source the first configuration file
source("configFile_1.R")

## 5.3. Perform the scalability analysis on the first configuration file

finalOutput_DRIMSeq_1 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_DRIMSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DRIMSeq_1[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DRIMSeq_1, file = "/home/compomics/scTime_Chen/results/finalOutput_DRIMSeq_1.RData") # I save this list as RData

## 5.4. Source the second configuration file
source("configFile_2.R")

## 5.5. Perform the scalability analysis on the second configuration file

finalOutput_DRIMSeq_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_DRIMSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DRIMSeq_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DRIMSeq_2, file = "/home/compomics/scTime_Chen/results/finalOutput_DRIMSeq_2.RData") # I save this list as RData


# 6. Scalability benchmark of DEXSeq

## 6.1. Source the DEXSeq method file
source("apply_DEXSeq.R")

## 6.2. Source the second (!) configuration file
source("configFile_2.R")

## 6.3. Perform the scalability analysis on the second configuration file

finalOutput_DEXSeq_2 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_DEXSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DEXSeq_2[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DEXSeq_2, file = "/home/compomics/scTime_Chen/results/finalOutput_DEXSeq_2.RData") # I save this list as RData

## 6.4. Source the third (!) configuration file
source("configFile_3.R")

## 6.5. Perform the scalability analysis on the third configuration file

finalOutput_DEXSeq_3 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_DEXSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DEXSeq_3[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DEXSeq_3, file = "/home/compomics/scTime_Chen/results/finalOutput_DEXSeq_3.RData") # I save this list as RData

## 6.6. Source the fourth (!) configuration file
source("configFile_4.R")

## 6.7. Perform the scalability analysis on the fourth configuration file

finalOutput_DEXSeq_4 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_DEXSeq(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		print(result$memory)
		#print(result$result)
		finalOutput_DEXSeq_4[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_DEXSeq_4, file = "/home/compomics/scTime_Chen/results/finalOutput_DEXSeq_4.RData") # I save this list as RData


# 7. Scalability benchmark of BANDITS

## 7.1. Source the BANDITS method file
source("apply_BANDITS.R")

## 7.2. Source the fifth (!) configuration file
source("configFile_5.R")

## 7.3. Perform the scalability analysis on the fifth configuration file

finalOutput_BANDITS_5 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_BANDITS(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		#print(result$memory)
		#print(result$result)
		finalOutput_BANDITS_5[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_BANDITS_5, file = "/home/compomics/scTime_Chen/results/finalOutput_BANDITS_5.RData") # I save this list as RData

## 7.4. Source the sixth (!) configuration file
source("configFile_6.R")

## 7.5. Perform the scalability analysis on the second configuration file

finalOutput_BANDITS_6 <- list()
round = 0
gc()


for (i in L$groupSizes){
	for (j in L$transcripts_amount){
                round = round + 1
		print(paste(i, "samples/cells,", j, "TXs"))
		run_BANDITS(L, countData, tx2gene) #function outputs the object result
                #print(result$info)
                print(result$timing)
                #print(result$removed)
		#print(result$memory)
		#print(result$result)
		finalOutput_BANDITS_6[round] <- list(result) # I store this object in a list
	}
}

save(finalOutput_BANDITS_6, file = "/home/compomics/scTime_Chen/results/finalOutput_BANDITS_6.RData") # I save this list as RData









